<?php
// $Id$ 

require_once(dirname(__FILE__).'/actions.php');
set_error_handler('error_handler', E_ALL);

/**
 * Implementation of hook_menu()
 */
function themler_menu() {
  $items = array();
  $items['admin/config/content/themler'] = array(
    'access callback' => TRUE,
    'page callback' => 'themler_page',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK
  );
  $items['admin/config/content/themler/update'] = array(
    'access callback' => TRUE,
    'page callback' => 'themler_update',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK
  );
  $items['admin/config/content/themler/export'] = array(
    'access callback' => TRUE,
    'page callback' => 'themler_export',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK
  );
  $items['admin/config/content/themler/save'] = array(
    'access callback' => TRUE,
    'page callback' => 'themler_save',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK
  );
  $items['admin/config/content/themler/rename'] = array(
    'access callback' => TRUE,
    'page callback' => 'themler_rename',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK
  );
  $items['admin/config/content/themler/canrename'] = array(
    'access callback' => TRUE,
    'page callback' => 'themler_canrename',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK
  );
  $items['admin/config/content/themler/getfiles'] = array(
    'access callback' => TRUE,
    'page callback' => 'themler_get_files',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK
  );
  $items['admin/config/content/themler/setfiles'] = array(
    'access callback' => TRUE,
    'page callback' => 'themler_set_files',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK
  );
  $items['admin/config/content/themler/download'] = array(
    'access callback' => TRUE,
    'page callback' => 'themler_download',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK
  );
  $items['admin/config/content/themler/clear'] = array(
    'access callback' => TRUE,
    'page callback' => 'themler_clear',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK
  );
  $items['admin/config/content/themler/publish'] = array(
    'access callback' => TRUE,
    'page callback' => 'themler_publish',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK
  );
  $items['admin/config/content/themler/validation'] = array(
    'access callback' => TRUE,
    'page callback' => 'themler_validation',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK
  );
  $items['admin/config/content/themler/uploadimage'] = array(
    'access callback' => TRUE,
    'page callback' => 'themler_upload_image',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK
  );
  $items['admin/config/content/themler/refreshTemplates'] = array(
    'access callback' => TRUE,
    'page callback' => 'themler_refresh_templates',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK
  );

  return $items;
}

function themler_init() {
    $theme_name = getValue('theme');
    if (!$theme_name) {
        return;
    }

    theme_check_memory_limit(true);
    themler_enable_theme($theme_name); // enable theme 
    check_preview($theme_name); // looking for preview in the theme enabled directory
}

function themler_enable_theme($theme_name) {
    $preview_theme_name = get_preview_theme_name($theme_name);
    $themes = array($theme_name, $preview_theme_name);
    $all_themes = list_themes(); //Get all the available themes
    $clear = false;
    if (!array_key_exists($theme_name, $all_themes)) {
        $clear = true;
        $all_themes = system_rebuild_theme_data();
    }
    foreach ($themes as $theme_name) {
        $status = array_key_exists($theme_name, $all_themes) && ($all_themes[$theme_name]->status == 0);
        if ($status) {
            theme_enable(array($theme_name)); //enable theme
        }
        $clear = $clear || $status;
    }
    if ($clear) {
        drupal_flush_all_caches();
    }
}

function themler_page() {
    $theme_name = getValue('theme');
    $username = getValue('username');
    $passwd = getValue('passwd');
    $query = array('query' => themler_get_params());
    $url = '';
    if (user_is_logged_in()) {
        if ($theme_name) {
            if ($username || $passwd) {
                $url = 'admin/config/content/themler';
            }
            else {
                $project = get_project(get_theme_dir($theme_name));
                $php_version = phpversion();
                $required_php_version = '5.3.0';

                if (!count((array)$project)) {

                    drupal_set_message(sprintf('Billion Themler: theme `%s` has no project file', $theme_name), 'error');
                    $url = 'admin/appearance/settings';

                } elseif ($php_version && version_compare($php_version, $required_php_version, '<')) {

                    drupal_set_message(
                        sprintf('You cannot use Themler because it requires PHP version %s or higher. You are running version %s. Please upgrade your PHP version to continue.',  $required_php_version, $php_version), 'error'
                    );
                    $url = 'admin/appearance/settings';

                } else {
                    echo themler_show($theme_name, $project);
                }
            }
        } else {
            drupal_set_message('Billion Themler: wrong theme name parameter', 'error');
            $url = 'admin/appearance/settings';
        }
    }
    else {
        if ($theme_name && $username && $passwd && ($uid = user_authenticate($username, $passwd))) {
            $form_state = array('uid' => $uid);
            user_login_submit(array(), $form_state);
            $url = 'admin/config/content/themler';
        } else {
            drupal_set_message('Access denied: please login first', 'error');
            $url = 'user/login';
            $query = array('query' => drupal_get_destination());
        }
    }
    // for theme_show when user login
    if (!empty($url))
        drupal_goto($url, $query);
}

function themler_get_params() {
    $dest = drupal_get_destination();
    $query = parse_url($dest['destination'], PHP_URL_QUERY);
    parse_str($query, $params);
    if (isset($params['username'])) unset($params['username']);
    if (isset($params['passwd'])) unset($params['passwd']);
    return $params;
}

function themler_show($theme_name, $project) {
    global $user;

    $theme_dir = get_theme_dir($theme_name);
    $base_url = get_base_url_with_slash();
    $themler_url = base_path().drupal_get_path('module', 'themler');
    $isNew = getValue('create_theme', 'false'); // for save and publish new theme
    $isActive = 'false';
    $version = time();
    $domain = get_session_domain($theme_name);
    $domain_last_char = $domain[strlen($domain)-1];
    if ('/' !== $domain_last_char) {
        $domain = $domain . '/';
    }
    $returnUrl = urlencode(get_current_url_protocol_prefix() . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);
    $start = $domain . 'start?version=' . $version . '&returnUrl=' . $returnUrl;

    $data = json_encode(array(
        'uid' => $user->uid,
        'themeName' => $theme_name,
        'templates' => get_templates_url($base_url, $theme_name),
        'url' => get_urls($base_url, $theme_name),
        'isActive' => $isActive,
        'isNew' => $isNew,
        'cmsVersion' => get_versions(),
        'cssJsSources' => get_theme_cache($theme_dir),
        'md5Hashes' => get_theme_hashes($theme_dir),
        'project' => $project,
        'maxRequestSize' => get_max_request_size()
    ));

    $output = <<<EOT
<!DOCTYPE html>
<html>
<head>
    <title>Billion Themler</title>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <script type="text/javascript">
        window.pluginData = $data;
    </script>
    <script type="text/javascript" src="$themler_url/DataProvider.js?version=$version"></script>
    <script type="text/javascript" src="$start"></script>
    </head>
<body>
</body>
</html>
EOT;
    return $output;
}

function themler_update() {
    themler_login_user();
    $theme_name = $_POST['themeName'];
    $preview_theme_name = get_preview_theme_name($theme_name);
    $response = update($theme_name);
    drupal_json_output($response);
}

function themler_export() {
    themler_login_user();
    $theme_name = $_POST['themeName'];
    $info = getExportInfo();
    $response = export($theme_name, $info);
    drupal_json_output($response);
}

function themler_save() {
    themler_login_user();
    $theme_name = $_POST['themeName'];
    $info = getExportInfo();
    $isNew = false;
    $response = save($info, $theme_name, $isNew);
    drupal_json_output($response);
}

function themler_download() {
    ProviderLog::start('themler_download');
    themler_login_user();
    $theme_name = $_POST['themeName'];
    $user_theme_name = isset($_POST['userThemeName']) ? $_POST['userThemeName'] : '';
    $include_editor = isset($_POST['includeEditor']) && $_POST['includeEditor'] !== 'false' ? true : false;
    $archive = download($theme_name, $user_theme_name, $include_editor);
    ProviderLog::end('themler_download');
    echo $archive['content'];
}

function themler_rename() {
    ProviderLog::start('themler_rename');
    themler_login_user();
    $theme_name = $_POST['themeName'];
    $new_theme_name = isset($_POST['newThemeName']) ? $_POST['newThemeName'] : '';
    $response = rename_theme($theme_name, $new_theme_name);
    ProviderLog::end('themler_rename');
    drupal_json_output($response);
}

function themler_canrename() {
    ProviderLog::start('themler_canrename');
    themler_login_user();
    $theme_name = $_POST['themeName'];
    $new_theme_name = isset($_POST['newThemeName']) ? $_POST['newThemeName'] : '';
    $response = can_rename($theme_name, $new_theme_name);
    ProviderLog::end('themler_canrename');
    drupal_json_output($response);
}

function themler_upload_image() {
    ProviderLog::start('themler_upload_image');
    themler_login_user();
    $theme_name = getValue('theme');
    $response = upload_image($theme_name);
    ProviderLog::end('themler_upload_image');
    drupal_json_output($response);
}

function themler_validation() {
    ProviderLog::start('themler_validation');
    themler_login_user();
    $new_theme_name = isset($_POST['newThemeName']) ? $_POST['newThemeName'] : '';
    $response = theme_name_validate($new_theme_name);
    ProviderLog::end('themler_validation');
    echo $response;
}

function themler_get_files() {
    ProviderLog::start('themler_get_files');
    themler_login_user();
    $theme_name = $_POST['themeName'];
    $mask = isset($_POST['mask']) ? $_POST['mask'] : null;
    $filter = isset($_POST['filter']) ? $_POST['filter'] : null;
    $response = get_files($theme_name, $mask, $filter);
    ProviderLog::end('themler_get_files');
    drupal_json_output($response);
}

function themler_set_files() {
    ProviderLog::start('themler_set_files');
    themler_login_user();
    $response = set_files();
    ProviderLog::end('themler_set_files');
    drupal_json_output($response);
}

function themler_clear() {
    ProviderLog::start('themler_clear');
    themler_login_user();
    $response = clear_chunk();
    ProviderLog::end('themler_clear');
    drupal_json_output($response);
}

function themler_publish() {
    // TODO: DB_update theme
}

function themler_refresh_templates() {
    ProviderLog::start('themler_refresh_templates');
    themler_login_user();
    $theme_name = $_POST['themeName'];
    $base_url = get_base_url_with_slash();
    $response = get_templates_url($base_url, $theme_name);
    ProviderLog::end('themler_refresh_templates');
    drupal_json_output($response);
}

function themler_custom_theme() {
    $theme_name = getValue('theme');
    if ($theme_name) {
        return get_preview_theme_name($theme_name);
    }
}

function themler_login_user() {
    ProviderLog::start('themler_login_user');
    theme_check_memory_limit();
    if (isset($_POST['uid']) && !user_is_logged_in()) {
        global $user;
        $user = user_load($_POST['uid']);
        $login_array = array ('name' => $user->name, 'pass' => $user->pass);
        user_login_finalize($login_array);
    }
    ProviderLog::end('themler_login_user');
}

function get_urls($base_url, $theme_name) {
    return array(
        'admin'            => $base_url . 'admin',
        'preview'          => $base_url . '?theme=' . $theme_name,
        'update'           => $base_url . 'admin/config/content/themler/update', 
        'export'           => $base_url . 'admin/config/content/themler/export', 
        'save'             => $base_url . 'admin/config/content/themler/save', 
        'publish'          => $base_url . 'admin/config/content/themler/publish', 
        'rename'           => $base_url . 'admin/config/content/themler/rename', 
        'canRename'        => $base_url . 'admin/config/content/themler/canrename',
        'getFiles'         => $base_url . 'admin/config/content/themler/getfiles',
        'setFiles'         => $base_url . 'admin/config/content/themler/setfiles',
        'download'         => $base_url . 'admin/config/content/themler/download',
        'clear'            => $base_url . 'admin/config/content/themler/clear', 
        'validation'       => $base_url . 'admin/config/content/themler/validation', 
        'uploadImage'      => $base_url . 'admin/config/content/themler/uploadimage?theme=' . $theme_name,
        'refreshTemplates' => $base_url . 'admin/config/content/themler/refreshTemplates',
    );
}

function get_templates_url($base_url, $theme_name) {
    $templates = array();
    $templates['home'] = $base_url . '?theme=' . $theme_name;
    $templates['blogTemplate'] = $base_url . 'node?theme=' . $theme_name;

    $node_types = array('article' => 'singlePostTemplate', 'page' => 'pageTemplate', 'forum' => 'forumTemplate');
    foreach ($node_types as $type => $name) {
        $query = db_select('node', 'n')
            ->condition('n.status', '1')
            ->condition('n.type', $type);
            $query->addExpression('MIN(n.nid)');
        $min_nid = $query->execute()->fetchField();
        if ($min_nid) {
            $templates[$name] = $base_url . 'node/' . $min_nid . '/?theme=' . $theme_name;
        } else {
            $templates[$name] = $base_url . 'notemplate/' . $type . '/?theme=' . $theme_name;
        }
    }

    $templates['default'] = $base_url . 'user?theme=' . $theme_name;
    $templates['template404'] = $base_url . 'not-found?theme=' . $theme_name;
    return $templates;
}

restore_error_handler();